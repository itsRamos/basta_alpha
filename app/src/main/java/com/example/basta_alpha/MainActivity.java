package com.example.basta_alpha;

import androidx.appcompat.app.AppCompatActivity;

import android.graphics.Color;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.util.Log;
import android.view.Gravity;
import android.view.View;
import android.widget.Button;
import android.widget.SeekBar;
import android.widget.TextView;

import java.util.Random;

public class MainActivity extends AppCompatActivity {

    TextView timerTextView;
    SeekBar timerSeekBar;
    TextView gameLetter;
    Boolean counterIsActive = false;
    Button goButton;
    CountDownTimer countDownTimer;

    TextView letterSelections;
    TextView scoreCounter;
    int timerDuration = 5;
    String referenceSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    char[] selectedSet = new char[referenceSet.length()];
    int turnCounter = 0;
    String randomLetter;


    public void resetTimer() {
        timerTextView.setText("Ready");
//        timerSeekBar.setProgress(timerDuration);
        timerSeekBar.setEnabled(true);
        countDownTimer.cancel();
        goButton.setText("GO!");
        counterIsActive = false;
    }


    public void updateTimer(int secondsLeft) {
        int minutes = secondsLeft / 60;
        int seconds = secondsLeft - (minutes * 60);

        String secondString = Integer.toString(seconds);

        if (seconds <= 9) {
            secondString = "0" + secondString;
        }

        timerTextView.setText(Integer.toString(minutes) + ":" + secondString);
    }


    public void buttonClicked(View view){
        Log.i("Button Pressed", "Nice!");

        if (counterIsActive) {
            MediaPlayer mplayerwin = MediaPlayer.create(getApplicationContext(),R.raw.gamewin);
            mplayerwin.start();
            resetTimer();

        } else {
            counterIsActive = true;
            timerSeekBar.setEnabled(false);
//            goButton.setBackgroundColor(Color.parseColor("#F44336"));
//            goButton.setBackgroundColor(Color.RED);
            placeSelection();

            scoreCounter.setText(String.valueOf(turnCounter));

            goButton.setText("BASTA!");

            //This is probably where I need to display the current selection but probably should address the filtered selections
//            letterSelections.setText("A");
            letterSelections.setText(selectedSetToString());
            letterSelections.setGravity(Gravity.CENTER);

            // Display the letter generated by the random generator.
            gameLetter = findViewById(R.id.displayText);
            gameLetter.setText(randomLetter);
//            gameLetter.setText(getRandomLetter(1)); //PART 1: Of code that works, activate part 2 is shit hits the fan

            countDownTimer = new CountDownTimer(timerSeekBar.getProgress() * 1000 + 100, 1000) {

                @Override
                public void onTick(long l) {
                    updateTimer((int) l / 1000);
                }

                @Override
                public void onFinish() {
                    Log.i("Finished","Timer all done");

                    MediaPlayer mplayer = MediaPlayer.create(getApplicationContext(),R.raw.gameover);
                    mplayer.start();
                    resetTimer();
                }
            }.start();
        }
    }

// PART 2: Function that works
//    public static String getRandomLetter(int i) {
//        final String character = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
//
//        StringBuilder result = new StringBuilder();
//
//        while (i > 0) {
//            Random rand = new Random();
//            result.append(character.charAt(rand.nextInt(character.length())));
//            i--;
//        }
//        return result.toString();
//    }


    public static String generateRandomLetter(int i) {
        final String character = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

        StringBuilder result = new StringBuilder();

        while (i > 0) {
            Random rand = new Random();
            result.append(character.charAt(rand.nextInt(character.length())));
            i--;
        }

        return result.toString();
    }

//    public void placeSelection() {
//        randomLetter = generateRandomLetter(1);
//        selectedSet[turnCounter] = randomLetter.charAt(0);
//        turnCounter++;
//    }

    public void placeSelection() {
        boolean repeat = true;
//        int l = 0;

        while (repeat == true) {
            randomLetter = generateRandomLetter(1);
            Log.i("Letter", "Random letter has been generated: " + randomLetter);

            repeat = checkRepeat(randomLetter);

//            Log.i("Repeat Check", "Starting for turn: " + turnCounter);
//            for (l = 0; l <= turnCounter; l++) {

//                Log.i("Repeat Check", randomLetter + " = " + selectedSet[l]);
//                if (randomLetter.equals(String.valueOf(selectedSet[l]))) {
//                    repeat = true;
//                    Log.i("Repeat", "Found a repeat at " + l);
//                    break;
//                }
//                else {
//                    repeat = false;
//                    Log.i("No repeat", "No repeats found");
//
//                }
//            }
        }
        Log.i("selection", "Assigning: " + randomLetter.charAt(0) + " to " + selectedSet);
        selectedSet[turnCounter] = randomLetter.charAt(0);
        turnCounter++;
    }


    public String selectedSetToString() {
        int i = 0;
        StringBuilder uniqueSelections = new StringBuilder();
//        placeSelection();

        for(i=0;i<selectedSet.length;i++) {
            uniqueSelections.append(selectedSet[i]);
        }
        return uniqueSelections.toString();
    }


    public boolean checkRepeat(String generatedCharacter) {
        boolean flag = false;
        int l = 0;
        Log.i("Repeat Check", "Starting for turn: " + turnCounter);
            for (l = 0; l <= turnCounter; l++) {

                Log.i("Repeat Check", randomLetter + " = " + selectedSet[l]);
                if (randomLetter.equals(String.valueOf(selectedSet[l]))) {
                    flag = true;
                    Log.i("Repeat", "Found a repeat at " + l);
//                    return flag;
                    break;
                }
                else {
                    flag = false;
                    Log.i("No repeat", "No repeats found");
//                    return flag;

                }
            }
            return flag;
    }


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        timerSeekBar = findViewById(R.id.timerSeekBar);
        timerTextView = findViewById(R.id.timerText);
        goButton = findViewById(R.id.triggerButton);

        timerSeekBar.setMax(timerDuration);
        timerSeekBar.setProgress(timerDuration);

        letterSelections = findViewById(R.id.letterSelections);
        scoreCounter = findViewById(R.id.scoreCounter);

        timerSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
                updateTimer(i);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {

            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {

            }
        });
    }
}
